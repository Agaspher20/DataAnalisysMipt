# В приложенном файле — данные по ежемесячному уровню производства молока в фунтах на одну корову
# Загрузите ряд, например, так:
#%%
import pandas as pd
import numpy as np
milk = pd.read_csv("..\..\Data\monthly-milk-production.csv",";", index_col=["month"], parse_dates=["month"], dayfirst=True)
milk.head()
# и постройте его график. Какой из приведённых ниже графиков у вас получился?
#%%
%pylab inline
milk.plot()
# Примените к ряду из предыдущего вопроса критерий Дики-Фуллера. Это делается так:
#%%
import statsmodels.api as sm
(adf,pvalue,usedlag,nobes,icbest,resstore) = sm.tsa.stattools.adfuller(milk["milk"])
print "%.2f" % np.round(pvalue, 2)

# Часто, когда вы имеете дело с величинами, представляющими собой сумму значений показателя за каждый день или за каждый
# рабочий день, имеет смысл перед началом прогнозирования поделить весь ряд на число дней в периоде.
# Например, если поделить ряд с объёмом производства молока на одну корову на число дней в месяце, полученная величина будет
# меняться более плавно, и для неё легче будет построить прогнозирующую модель.
# Корректно определить число дней в месяце можно с помощью свойства days_in_month у индекса ряда или функции monthrange из
# пакета calendar.
# Используйте число дней в месяце для того, чтобы вычислить новый показатель — среднее дневное число полученного молока на
# одну корову.
# Постройте график этого ряда и убедитесь, что он стал более гладким.
# В качестве ответа введите сумму значений полученного показателя за весь период; округлите до двух знаков после десятичной
# точки.
#%%
average_day_milk = pd.DataFrame(
    map(lambda (index,row): float(row["milk"])/index.days_in_month, milk.iterrows()),
    milk.index,
    ["milk"])
average_day_milk.plot()
print "%.2f" % np.round(average_day_milk["milk"].sum(), 2)
