# Задача заключается в том, чтобы применить предобученную на imagenet нейронную сеть на практической задаче классификации
# автомобилей.
# Учиться применять нейронные сети для анализа изображений мы будем на библиотеке TensorFlow.
# Это известный опенсорсный проект, разработанный инженерами Google Brain Team.
# Чтобы освоить компьютерное зрение (или другие интересные задачи из области ML и AI), так или иначе придётся научиться
# работать с библиотеками нейронных сетей, линуксом и виртуальными серверами. Например, для более масштабных практических
# задач, крайне необходимы сервера с GPU, а с ними уже локально работать не получится.
# Помимо tensorflow, потребуется библиотека scipy.
# Если вы уже работали с Anaconda и/или выполняли задания в нашей специализации, то она должна присутствовать. 

# Данные это часть выборки Cars Dataset
# Исходный датасет содержит 16,185 изображений автомобилей, принадлежащих к 196 классам.
# Данные разделены на 8,144 тренировочных и 8,041 тестовых изображений, при этом каждый класс разделён приблизительно
# поровну между тестом и трейном.
# Все классы уровня параметров Марка, Год, Модель и др. (например, 2012 Tesla Model S or 2012 BMW M3 coupe).
# В нашем же случае в train 204 изображения, и в test — 202 изображения.
#%%
# Импортируем всё, что нам нужно для работы.
import sys
sys.path.append("DataAnalisysMipt\\Python\\5. DataAnalysisApplications")
from task2_1_imagenet_classes import class_names
from task2_1_model import vgg16
import task2_1_result_functions
import glob
import os
import tensorflow as tf
import numpy as np
from scipy.misc import imread, imresize
import sys
from sklearn.svm import SVC
#%%
# Инициируем TF сессию, и инициализируем модель. На этом шаге модель загружает веса. Веса - это 500Мб в сжатом виде
# и ~2.5Гб в памяти, процесс их загрузки послойно выводится ниже этой ячейки, и если вы увидите этот вывод ещё раз - 
# у вас неистово кончается память. Остановитесь. Также, не запускайте эту ячейку на выполнение больше одного раза
# за запуск ядра Jupyter.
sess = tf.Session()
imgs = tf.placeholder(tf.float32, [None, 224, 224, 3])
vgg = vgg16(imgs, "DataAnalisysMipt\\Data\\automobiles\\vgg16_weights.npz", sess)
# Все ячейки выше не нуждаются в модификации для выполнения задания, и необходимы к исполнению только один раз,
# в порядке следования. Повторный запуск ячейки с инициализацией модели будет сжирать память. Вы предупреждены.
#%%
# Задание 1.
# Для начала нужно запустить готовую модель vgg16, предобученную на imagenet.
# Модель обучена с помощью caffe и сконвертирована в формат tensorflow - vgg16_weights.npz.
# Скрипт, иллюстрирующий применение этой модели к изображению, возвращает топ-5 классов из imagenet и уверенность в этих
# классах.
# Задание: Загрузите уверенность для первого класса для изображения train/00002.jpg с точностью до 1 знака после запятой
# в файл с ответом.
